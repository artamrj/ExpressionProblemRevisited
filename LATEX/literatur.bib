@inproceedings{torgersen2004expression,
  author    = {Mads Torgersen},
  title     = {The Expression Problem Revisited: Four new solutions using generics},
  booktitle = {ECOOP 2004 - Object-Oriented Programming, 18th European Conference, Oslo, Norway, June 14-18, 2004, Proceedings},
  year      = {2004},
  pages     = {123--143},
  doi       = {10.1007/978-3-540-24851-4_6},
  url       = {https://www.researchgate.net/publication/221496613_The_Expression_Problem_Revisited},
  publisher = {Springer},
  address   = {Berlin, Heidelberg},
  note      = {SourceDBLP}
}
@misc{wadler1998expression,
  author       = {Philip Wadler},
  title        = {The Expression Problem},
  year         = {1998},
  month        = {November},
  day          = {12},
  howpublished = {Online},
  note         = {Der Artikel ist auf folgender URL erh√§ltlich: \url{https://homepages.inf.ed.ac.uk/wadler/papers/expression/expression.txt} (zuletzt besucht am 18. Juli 2024)},
  urldate      = {2024-07-18}
}


@inbook{Reynolds1978,
  author    = {Reynolds, John C.},
  editor    = {Gries, David},
  title     = {User-Defined Types and Procedural Data Structures as Complementary Approaches to Data Abstraction},
  booktitle = {Programming Methodology: A Collection of Articles by Members of IFIP WG2.3},
  year      = {1978},
  publisher = {Springer New York},
  address   = {New York, NY},
  pages     = {309--317},
  note      = {Originally presented at the IFIP Working Group 2.1 conference on New Directions in Algorithmic Languages, Munich, 1975},
  abstract  = {User-defined types (or modes) and procedural (or functional) data structures are complementary methods for data abstraction, each providing a capability lacked by the other. With user-defined types, all information about the representation of a particular kind of data is centralized in a type definition and hidden from the rest of the program. With procedural data structures, each part of the program which creates data can specify its own representation, independently of any representations used elsewhere for the same kind of data. However, this decentralization of the description of data is achieved at the cost of prohibiting primitive operations from accessing the representations of more than one data item. The contrast between these approaches is illustrated by a simple example.},
  isbn      = {978-1-4612-6315-9},
  doi       = {10.1007/978-1-4612-6315-9_22},
  url       = {https://doi.org/10.1007/978-1-4612-6315-9_22}
}

@InProceedings{Cook1990,
  author    = {William Cook},
  editor    = {J. W. de Bakker and W. P. de Roever and G. Rozenberg},
  title     = {Object-Oriented Programming versus Abstract Data Types},
  booktitle = {Foundations of Object-Oriented Languages (FOOL), REX School/Workshop},
  series    = {Lecture Notes in Computer Science},
  volume    = {489},
  year      = {1990},
  address   = {Noordwijkerhout, The Netherlands},
  publisher = {Springer Berlin Heidelberg},
  pages     = {151--178},
  doi       = {10.1007/BFb0019443},
  isbn      = {978-3-540-46450-1},
}

@InProceedings{Krishnamurthi1998,
  author    = {Shriram Krishnamurthi and Matthias Felleisen and Daniel P. Friedman},
  title     = {Synthesizing Object-Oriented and Functional Design to Promote Reuse},
  booktitle = {European Conference on Object-Oriented Programming (ECOOP)},
  year      = {1998},
  address   = {Department of Computer Science, Rice University},
  note      = {A preliminary version of this paper appeared in the European Conference on Object-Oriented Programming},
}

@book{gamma1994design,
  title={Design patterns: elements of reusable object-oriented software},
  author={Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John},
  year={1994},
  publisher={Addison-Wesley Professional}
}

@article{hughes1989functional,
  title={Why Functional Programming Matters},
  author={Hughes, John},
  journal={The Computer Journal},
  volume={32},
  number={2},
  pages={98--107},
  year={1989},
  publisher={Oxford University Press}
}

@book{typescript2019deepdive,
  author       = {Basarat Ali Syed},
  title        = {TypeScript Deep Dive},
  year         = {2019},
  howpublished = {Online},
  url          = {https://basarat.gitbook.io/typescript/},
  note         = {Zugriff am 01. Juli 2024}
}

@book{rozentals2019typescript,
  author    = {Nathan Rozentals},
  title     = {Mastering TypeScript},
  publisher = {Packt Publishing},
  year      = {2019},
  isbn      = {9781789536706}
}
